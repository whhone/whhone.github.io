[{"content":"This post categorizes programmers into 3 levels by their abilities to read and write in these 3 programming styles.\nLevel 1: Newbie Programmers Programmers at this level can read and write the basic taught in \u0026ldquo;Introduction to XXX Programming\u0026rdquo;. They use indexed for loop or while loop for all repeated logic as these are the only options for them. Programmers at this level can read and write this code.\nint sumOddValuesLevel1(List\u0026lt;int\u0026gt; list) { var sum = 0; for (var i = 0; i \u0026lt;= list.length; ++i) { if (list[i] % 2 == 1) { sum += list[i]; } } return sum; } This code is long and wearying to read. It has more low-level details and mutable variables. It tends to contain bugs (e.g., the above for loop should use \u0026lt; instead of \u0026lt;=).\nThey are mostly fresh grads or junior programmers. Most of them will go to the next level with more industrial experience.\nLevel 2: Ordinary Programmers Programmers at this level can read and write the common patterns learned from experiences, like peer code review or reading existing codes. For example, after reading .where and for-in loop repeatedly in the codebase, level 2 programmers can read and write this code with ease (they still have the option to use the indexed for loop whenever they think it works better).\nint sumOddValuesLevel2(List\u0026lt;int\u0026gt; list) { final oddList = list.where((e) =\u0026gt; e % 2 == 1); var sum = 0; for (final odd in oddList) { sum += odd; } return sum; } This code is better than sumOddValuesLevel1. It has fewer low-level details and mutable variables. From my experience, this is the norm of the industrial standard.\nMost programmers will reach this level but will likely stop here.\nLevel 3: Great Programmers Programmers at this level know the options, can write the cleanest code, and use the best possible patterns, even if they are less common in the their codebases. In addition, they make these good patterns common.\nThey learn actively, beyond what they are seeing from peers' works. They learn each details of their programming languages. For example, even the high order functions like fold and reduce are not common in their codebase, level 3 programmers can still read and write this code with ease (they still have the option to use the for-in loop above whenever they think it works better).\nint sumOddValuesLevel3(List\u0026lt;int\u0026gt; list) =\u0026gt; list.where((e) =\u0026gt; e.isOdd).fold(0, (p, e) =\u0026gt; p + e); This code is concise and clean, highly abstracted with clear intention (filter the list then reduce to a value). It contains no mutable variables (more \u0026ldquo;functional\u0026rdquo;) and hard to hide bugs inside.\nA programmer can reach this level with active learning (and/or if they are lucky to have awesome peers).\nIs Higher-Level Code More Readable? The answer is both yes and no.\n  For lower-level programmers, higher-level codes are harder to read because they are not familiar with the patterns. They avoid writing high-level codes or might even argue those codes are bad and less readable. As a metaphor, literature is hard to read for lower-level book readers.\n  For higher-level programmers, higher-level codes could be more readable because they are more abstract with fewer details, and give explicit intentions. They can still read lower-level codes (and probably faster than lower-level programmers) but they might not like them because of the redundant details and possible bugs. As a metaphor, a higher-level book writer can express complex ideas accurately in concise sentences, with less common vocabularies/concepts. They are more readable to higher-level readers, who already know those vocabularies/concepts well.\n  Conclusion Higher-level programmers have the ability to read higher-level codes and the option to write higher-level codes. Whether or not to use higher-level codes involves factors like performance impacts in critical paths, programming languages, personal preferences, team cultures, and so on.\nAlso, the low-level and high-level programmer idea is not limited to programming style. It also applies to the ability to understand and apply design patterns, architectures, programming paradigms, and even transcending the engineering field.\nTo go higher-level,\n Active learning helps. It is the way to learn something we might haven\u0026rsquo;t seen. Great peers are great. They bring higher-level patterns and codes to the team and teach the peers.  I hope myself and my peers go to a higher level and learn from each other :)\n","permalink":"https://whhone.github.io/posts/3-levels-of-programmers/","summary":"This post categorizes programmers into 3 levels by their abilities to read and write in these 3 programming styles.\nLevel 1: Newbie Programmers Programmers at this level can read and write the basic taught in \u0026ldquo;Introduction to XXX Programming\u0026rdquo;. They use indexed for loop or while loop for all repeated logic as these are the only options for them. Programmers at this level can read and write this code.\nint sumOddValuesLevel1(List\u0026lt;int\u0026gt; list) { var sum = 0; for (var i = 0; i \u0026lt;= list.","title":"3 Levels of Programmers"},{"content":"My name is Wai Hon, a native Hongkonger, a software engineer, a husband and a father, now living in the Bay Area. I started writing this blog as my 2020 new year resolution, on the thoughts, learning methods and software engineering.\n","permalink":"https://whhone.github.io/about/","summary":"My name is Wai Hon, a native Hongkonger, a software engineer, a husband and a father, now living in the Bay Area. I started writing this blog as my 2020 new year resolution, on the thoughts, learning methods and software engineering.","title":"About"},{"content":"Make 24 is a traditional math game with simple rule \u0026ndash; given 4 numbers, you are asked to make 24 with addition +, subtraction -, multiplication * and division /. Each number should be used once and only once.\nFor example, (3, 7, 2, 1) --\u0026gt; 3 * (7 + 2 - 1) = 24.\nMost Make 24 puzzles are easy but a few are extremely hard. This post collects some of the hardest puzzles and discuss them in 3 types. Before jumping into the solutions, let\u0026rsquo;s take a while to try these 6 puzzles.\n(1, 3, 9, 10) (4, 4, 10, 10) (1, 5, 5, 5) (3, 3, 7, 7) (3, 3, 8, 8) (1, 4, 5, 6) Type 1 Puzzles (1, 3, 9, 10) --\u0026gt; (1 + 10) * 3 - 9 (4, 4, 10, 10) --\u0026gt; (10 * 10 - 4) / 4 These puzzles have only one solution that are not simply multiplication like (3 * 8), (4 * 6) or (2 * 12). The solutions look simple but they are hard to come up with for most people.\nType 2 Puzzles (1, 5, 5, 5) --\u0026gt; 5 * (5 - 1 / 5) (3, 3, 7, 7) --\u0026gt; 7 * (3 + 3 / 7) These puzzles use division but the dividend is not divisible by the divisor. Some people might think this is violating the rule but of course it is not.\nThese puzzles share a common pattern \u0026ndash; (x, y, z, z) where x * z + y = 24 or x * z - y = 24.\n Let z = 5 in (1, 5, 5, 5), then we have 5 * 5 - 1 = 24. Let z = 7 in (3, 3, 7, 7), then we have 3 * 7 + 3 = 24.  That means, since 2 * 9 + 6 = 24, I can add a 9 to create a puzzle in this type.\n(2, 6, 9, 9) --\u0026gt; 9 * (2 + 6 / 9) Type 3 Puzzles (3, 3, 8, 8) --\u0026gt; 8 / (3 - 8 / 3) (1, 4, 5, 6) --\u0026gt; 4 / (1 - 5 / 6) These puzzles are the hardest of the hardest. Similar to type 2 puzzles, they use division while the dividend is not divisible by the divisor, but they don\u0026rsquo;t have a simple pattern to spot them out easily.\nFortunately, these puzzles are extremely rare. These two are the only two if all numbers are less than or equal to 10. Just remember them.\nBy the way, there is one more solution for (1, 4, 5, 6). I will leave it for the clever readers.\n","permalink":"https://whhone.github.io/posts/the-hardest-make-24-puzzles/","summary":"Make 24 is a traditional math game with simple rule \u0026ndash; given 4 numbers, you are asked to make 24 with addition +, subtraction -, multiplication * and division /. Each number should be used once and only once.\nFor example, (3, 7, 2, 1) --\u0026gt; 3 * (7 + 2 - 1) = 24.\nMost Make 24 puzzles are easy but a few are extremely hard. This post collects some of the hardest puzzles and discuss them in 3 types.","title":"The Hardest Make 24 Puzzles"},{"content":"As mentioned in the last post, I switched to Org-Mode. I kept adjusting my workflow with this new tool and it has been stabilized for a month. I think it is time to talk about the new workflow for task/time management with Org-Mode. This blog post consists of four parts: the principles, the definitions, the workflows, and finally the implementations.\n1 The Principles Principles remain valid no matter what the tool is.\n1.1 Do Not Add Tasks Indiscriminately Not every task should go into the system. Avoid filling the system with bullshits and hiding the things that matter. I only add tasks that I really want or need to do.\nTo clarify1, the task management system describled below is not the \u0026ldquo;inbox\u0026rdquo; in GTD. I still capture things into my inbox but not all of them will be converted to a task in the task management system (org agenda files) eventually.\n1.2 Not All Tasks Have To Be Done There are two reasons for this. First, tasks could be deprioritized or even become unnecessary. Second, we have limited time and cannot do everything. We should have an opinion on the priority.\n1.3 Reduce The Number Of Open Loop Open loops are tasks that have been started but not finished. They stay in our minds and occupy some of our limited working memory so that we cannot focus on another task we are working on.\nAlso, open loops reduce agility, according to Little\u0026rsquo;s Law. The more the open loops, the longer time finish each of them on average.\n1.4 Reduce Decision Making Of What To Do Next The system should suggest to the user what to do next so that the user can reserve the will power to the real task. This also avoids skipping hard tasks with easy tasks unconsciously.\n2 The Definitions Each task in Org-Mode has a TODO keyword, optionally a scheduled date, and a deadline. For example,\n*PROG Write a blog post on task management with Org-Mode DEADLINE: \u0026lt;2020-11-07 Sat\u0026gt; SCHEDULED: \u0026lt;2020-10-31 Sat\u0026gt; Each Org-Mode user could define their own set of TODO keywords and use scheduled dates and deadlines differently. For example, some people use only two TODO keywords, \u0026ldquo;TODO\u0026rdquo; and \u0026ldquo;DONE\u0026rdquo;, while some use more. Some people set \u0026ldquo;scheduled dates\u0026rdquo; to all the tasks while some people set it to some of the tasks. These nuances could result in a very different workflow, although they are using the same Org-Mode. Let\u0026rsquo;s take a look at how I use them.\n2.1 TODO Keywords I use as few TODO keywords as possible but not too few. For example, it is common to use only two states (\u0026ldquo;TODO\u0026rdquo; and \u0026ldquo;DONE\u0026rdquo;) but this does not align with the principles I mentioned above. I need a state for \u0026ldquo;open loops\u0026rdquo; so that I can keep the number of them small. I also need to distinguish a smaller set of \u0026ldquo;next actions\u0026rdquo; from all tasks.\nSo far, I defined these five keywords:\n   TODO Keyword Definition     TODO Tasks that are not started and not planned. They could be the backlogs or the GTD\u0026rsquo;s someday/maybe. These tasks could be converted to NEXT during a review.   NEXT Tasks that are not started but planned to do as soon as I can. When there is no actionable PROG (e.g., blocked), I start one of those and convert it to PROG.   PROG Tasks that are working in progress (open loops). I work on these tasks before starting another NEXT task to avoid too many open loops at any moment.   INTR The tasks that are interruptions. They are urgent things that I should drop everything else and work on it. For example, production issues.   DONE The tasks that are completed.    This diagram illustrates the transition of those states.\n+------+ | INTR | +------+ | v +------+ +------+ +------+ +------+ | TODO |--\u0026gt;| NEXT |--\u0026gt;| PROG |--\u0026gt;| DONE | +------+ +------+ +------+ +------+ 2.2 Scheduled and Deadline In the past, I tended to set a date for all tasks. If I want to do A, B, and C on Monday, then I schedule them for Monday. This sounds very intuitive but, in reality, I ended up rescheduling many incompleted tasks at the end of every day. It was not only wasting time but also depressing.\nLater, I changed to rely more on the TODO keywords. For example, if a task is still in progress, I keep the state unchanged as PROG instead of rescheduling it every day until it is done. I am now using the \u0026ldquo;scheduled date\u0026rdquo; to hide a task until the date I should look at it again. Similar to the snooze feature in Gmail.\n   Date Definition     SCHEDULED Hide the task until the scheduled date.   DEADLINE The deadline of the task.    For example, when a PROG task is being blocked, I set the SCHEDULED date to hide it until the date I want to revisit. On the scheduled date, if the task is unblocked, I will remove the SCHEDULED date. If the task is still blocked, I reschedule it again. It acts as the waiting for list in GTD.\n3 The Workflow I customize my org agenda view to drive my daily workflow. The customized agenda view has four sections. From the top to bottom, they are the tasks scheduled today, the INTR tasks, the PROG tasks, and finally the NEXT tasks.\nMy daily workflow goes from the top to the bottom.\n3.1 Update Tasks Scheduled Today At the beginning of the day, I review the tasks that are scheduled for today. The goal here is not to finish them, but to update or remove the scheduled date so that there is nothing left.\n If the task is still blocked, reschedule it If the task could be done in a few minutes, then do it and mark it as DONE. Otherwise, remove the scheduled date and optionally update the TODO keywords.  Removing the scheduled date is the best outcome. It indicates the previous estimation was correct, at least not too early. Rescheduling indicates the previous estimation is inaccurate. I would avoid rescheduling the task to tomorrow indiscriminately and try to make a good estimation to reduce the number of rescheduling.\n3.2 Find the Next Task to Work On After reviewing all tasks scheduled for today, it is time to pick a task and do some real works. This step is very straight-forward with the customized agenda view above.\n Pick an INTR task if there is any. If there is no INTR task, then pick a PROG task and work on it. If that task is blocked, set a SCHEDULED date to hide it. If there is no INTR and PROG task, then start a NEXT task. If there is no task in the agenda view, then review the TODO tasks and convert some to NEXT.  3.3 Review the System The secret of having a system that works in the long-term is regular maintenance. I do it at least once a week. For examples,\n Promote some tasks from TODO to NEXT. Demote or even delete deprioritized tasks. Review the journal and add TODO if something needs follow-up. Archive completed tasks and extract to permanent notes2.  4 The Configuration Finally, here is the configuration for the above workflow.\n;; Emacs Easy Customization (\u0026#34;M-x customize\u0026#34;) syntax is used. ;; If you prefer using .el files directly, set it with \u0026#34;setq\u0026#34;. ;; TODO keywords. \u0026#39;(org-todo-keywords \u0026#39;((sequence \u0026#34;TODO(t)\u0026#34; \u0026#34;NEXT(n)\u0026#34; \u0026#34;PROG(p)\u0026#34; \u0026#34;INTR(i)\u0026#34; \u0026#34;DONE(d)\u0026#34;))) ;; Show the daily agenda by default. \u0026#39;(org-agenda-span \u0026#39;day) ;; Hide tasks that are scheduled in the future. \u0026#39;(org-agenda-todo-ignore-scheduled \u0026#39;future) ;; Use \u0026#34;second\u0026#34; instead of \u0026#34;day\u0026#34; for time comparison. ;; It hides tasks with a scheduled time like \u0026#34;\u0026lt;2020-11-15 Sun 11:30\u0026gt;\u0026#34; \u0026#39;(org-agenda-todo-ignore-time-comparison-use-seconds t) ;; Hide the deadline prewarning prior to scheduled date. \u0026#39;(org-agenda-skip-deadline-prewarning-if-scheduled \u0026#39;pre-scheduled) ;; Customized view for the daily workflow. (Command: \u0026#34;C-c a n\u0026#34;) \u0026#39;(org-agenda-custom-commands \u0026#39;((\u0026#34;n\u0026#34; \u0026#34;Agenda / INTR / PROG / NEXT\u0026#34; ((agenda \u0026#34;\u0026#34; nil) (todo \u0026#34;INTR\u0026#34; nil) (todo \u0026#34;PROG\u0026#34; nil) (todo \u0026#34;NEXT\u0026#34; nil)) nil)))   Thanks for this comment in Reddit. \u0026#x21a9;\u0026#xfe0e;\n There will be another post for Org-Mode note-taking workflow. \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://whhone.github.io/posts/org-mode-task-management/","summary":"As mentioned in the last post, I switched to Org-Mode. I kept adjusting my workflow with this new tool and it has been stabilized for a month. I think it is time to talk about the new workflow for task/time management with Org-Mode. This blog post consists of four parts: the principles, the definitions, the workflows, and finally the implementations.\n1 The Principles Principles remain valid no matter what the tool is.","title":"An Org-Mode Workflow for Task Management"},{"content":"  Since 2017, Evernote has been my productivity system for note-taking and task management. I thought it was my ultimate system to stick with. It has served me so well and I have even became a paid user. However, mentioned in the last post, I am pursuing more privacy in my digital life and Evernote becomes a loophole.\n This post talks about the privacy concern, my research on the alternatives, and the switch to Org-Mode.\n1. The Privacy Concern of Evernote   The user data in Evernote is encrypted \u0026#34;during transport\u0026#34; and \u0026#34;at-rest\u0026#34;. This sounds secure to readers but actually not enough because Evernote can still see the content. Technically, it is still server-side encryption instead the client-side encryption (a.k.a. end-to-end encryption). The encryption key of the note content is held by the server instead of the client. If the server is hacked, or there is an evil employee, or Evernote needs to comply with legal obligations (i.e., the government asks for user data, and it does), those notes could be leaked.\n  2. Researching the Alternatives   I started researching the alternatives which do not compromise privacy. That means end-to-end encryption is required if the data is hosted on a third-party. This requirement actually simplifies my curation because many solutions are ruled out, including the popular Notion and Roam (o:\n My final shortlist included Org-Mode, Joplin, Standard Note, Taskwarrior, TODO.txt, and TiddlyWiki. I gave each of them a try, reviewed and scored them with my requirements below:\n  Privacy Can I seclude my data?\n  Basic Task Management: Can I set a date for a task and then view all tasks for today?\n  Task Context: Can I add references (instruction, link) to the task?\n  Linux Usability: How usable is it on Linux?\n  Android Usability: How usable is it on Android?\n  Synchronization: How hard is it to synchronize data between Linux and Android?\n      Evernote Org-Mode Joplin Standard Note Taskwarrior TODO.txt TiddlyWiki     Privacy 1 5 5 5 5 5 5   Task Management 4 5 1 1 5 5 ?   Task Context 5 4 4 5 2 1 ?   Linux Usability 4 5 4 4 3 3 ?   Android Usability 5 3 3 4 2 2 ?   Synchronization 5 4 5 5 4 4 ?     Total 24 26 22 24 21 20 ?    Review: Evernote (24)   Evernote has a reminder feature for simple task management, which is already enough for me. Since it is a note-taking app, I can add rich context like images or even audio seamlessly. Tusk makes it usabe on Linux and the official Android app is simply awesome. Synchronization works out-of-the-box.\n However, it fails on the privacy bit.\n  Review: Org-Mode (26)   Org-Mode is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system. It is absolutely capable.\n However, the learning curve of Org-Mode is steep and even steeper for non-Emacs users. Users are expected to read documentation and practice. Once familiarized with Emacs, its usability on Linux will jump from 0 to 5 (or even infinity). The Android client Orgzly is usable but could be better. Synchronization works with SyncThing.\n  Review: Joplin (22) and Standard Note (24)   Joplin and Standard Note are both strong note-taking alternatives to Evernote. However, they suck in task management because they simply cannot show all tasks scheduled for today. They both have a decent desktop app written in Electron. Synchronization works natively and usesr can turn on end-to-end encryption for privacy/security.\n If task management is not a requirement, both Joplin and Standard Note are very good alternatives.\n  Review: Taskwarrior (21) and TODO.txt (20)   Taskwarrior and TODO.txt are both FOSS for task management. However, they both allow only one line per task, which makes adding extra context to the task very hard. Their clients are barely usable to me (or I have not learned enough). Secure synchronization works with a self-hosted server or with SyncThing for Taskwarrior and TODO.txt respectively.\n  Review: TiddlyWiki (?)   TiddlyWiki is a \u0026#34;non-linear personal web notebook\u0026#34;. It looks fancy but I haven\u0026#39;t tried it intensively because Org-Mode seems working for me already at this point. I will leave it as a question mark.\n    3. Switching to Org-Mode   After all these explorations, Org-Mode looks promising to me and I started the Org-Mode/Emacs 30-day challenge – keep using Org-Mode/Emacs for a month. Note that I was still using Evernote during the transition but gradually reducing the dependency on it.\n I have now finished the challenge and can claim myself an Org-Mode user. I am happy with Org-Mode and the new workflow. Since the org files are in plain text, I manage my notes with Git, review, and polish all the changes before committing it. It helps to improve the quality of my notes!\n Beyond Org-Mode, I also started seeing the beauty of Emacs and why people use it instead of Vim or other modern editors. Emacs is ostensibly an editor but actually a powerful Lisp platform/runtime, which makes it super extensible and capable. Users can customize Emacs and make it their own systems for their own purposes.\n I am now using Emacs even more. For example, I replace Visual Studio Code, my previous editor/git porcelain, with Magit. This blog post is written in Emacs with ox-hugo. I probably will blog on these topics sometime in the future.\n All in all, I am very happy with the privacy gain and the learning from this switch!\n  ","permalink":"https://whhone.github.io/posts/from-evernote-to-org-mode/","summary":"Since 2017, Evernote has been my productivity system for note-taking and task management. I thought it was my ultimate system to stick with. It has served me so well and I have even became a paid user. However, mentioned in the last post, I am pursuing more privacy in my digital life and Evernote becomes a loophole.\n This post talks about the privacy concern, my research on the alternatives, and the switch to Org-Mode.","title":"From Evernote to Org-Mode"},{"content":"I recently re-installed my Arch Linux with full disk encryption (FDE), as one of the first steps, to bring privacy into my life. This guide documents the installation process in a step-by-step manner. I hope this can help people who also want to practice privacy.\nEach step in this guide are linked to the corresponding ArchWiki, precised to section level. You are suggested to read these references and, of course, the official installation guide because\n it is better to understand the process instead of blindly copy-and-pase, and I had omitted some uncommon steps that you might need (e.g., non US locale and keyboard layout)  This guide uses modern options like:\n    Options This Setup     Disk Encryption Yes, No Yes   Firmware BIOS, UEFI UEFI   Disk Partition MBR, GPT GPT   Boot Loader GRUB, Syslinux, systemd-boot, etc systemd-boot    In addition, I have verified this guide twice by installing on both hard disk and virtual machine respectively. I think it is reproducible.\nLet\u0026rsquo;s start!\n1. Verify the boot mode (ref) This guide assumes we use UEFI. You must ensure that the system is booted in UEFI mode. To verify the boot mode, list the efivars directory:\n# ls /sys/firmware/efi/efivars If the command shows the directory without error, then the system is booted in UEFI mode.\n2. Update the system clock (ref) Use timedatectl to ensure the system clock is accurate:\n# timedatectl set-ntp true 3. Partition the disks (ref, GPT fdisk) The final disk layout from this guide contains two partitions,\n   Partition Size Code Name     Boot (/dev/sda1) 512.0 MiB EF00 EFI system partition   Root (/dev/sda2) Rest of the disk 8300 (default of gdisk) Linux filesystem    Traditionally, it is suggested to create an extra swap partition. I don\u0026rsquo;t because there are more flexible alternatives over allocating a fixed partition for swap. For example, uses swap file, or systemd-swap to automate the swap file on demand.\nUse gdisk to partition the disk. See this video:\n  When completed, gdisk -l /dev/sda should print the disk partitions like these:\nGPT fdisk (gdisk) version 1.0.5 Partition table scan: MBR: protective BSD: not present APM: not present GPT: present Found valid GPT with protective MBR; using GPT. Disk /dev/sda: 41943040 sectors, 20.0 GiB Model: VBOX HARDDISK Sector size (logical/physical): 512/512 bytes Disk identifier (GUID): 8EFD04A2-473C-4FCA-9C89-459EEB658DB0 Partition table holds up to 128 entries Main partition table begins at sector 2 and ends at sector 33 First usable sector is 34, last usable sector is 41943006 Partitions will be aligned on 2048-sector boundaries Total free space is 2014 sectors (1007.0 KiB) Number Start (sector) End (sector) Size Code Name 1 2048 1050623 512.0 MiB EF00 EFI system partition 2 1050624 41943006 19.5 GiB 8300 Linux filesystem 4. Prepare the encrypted root partition (ref) Create and mount the encrypted root partition. You will need to choose the passphrase for the encryption!\n# cryptsetup luksFormat /dev/sda2 # cryptsetup open /dev/sda2 cryptroot # mkfs.ext4 /dev/mapper/cryptroot # mount /dev/mapper/cryptroot /mnt 5. Prepare the boot partition (ref) Create and mount the non-encrypted boot partition.\n# mkfs.fat -F32 /dev/sda1 # mkdir /mnt/boot # mount /dev/sda1 /mnt/boot 6. Generate an fstab file (ref) Run:\n# genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab 7. Install essential packages (ref) Use the pacstrap script to install these packages. I added vim for editing config files and dhcpcd for connecting to the Internet after reboot.\n# pacstrap /mnt base linux linux-firmware vim dhcpcd 8. Chroot (ref) # arch-chroot /mnt 9. Time zone (ref) # ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime # hwclock --systohc 10. Localization (ref) Edit /etc/locale.gen and uncomment en_US.UTF-8 UTF-8 and other needed locales. Generate the locales by running:\n# locale-gen # localectl set-locale LANG=en_US.UTF-8 11. Network configuration (ref) Add the /etc/hosts:\n127.0.0.1 localhost ::1 localhost 12. Configuring mkinitcpio (ref) Edit /etc/mkinitcpio.conf,\n add the encrypt hooks move the keyboard hooks before encrypt ( so that you can type the passphrase :p )  For example, after this step, HOOKS should look like:\nHOOKS=(base udev autodetect modconf block keyboard encrypt filesystems fsck) 13. Generate the initramfs (ref) Since we have changed to /etc/mkinitcpio.conf manually, we have to re-generates the boot images (e.g., /boot/initramfs-linux.img). Run this command:\n# mkinitcpio -P 14. Set the root password (ref) # passwd 15. Patch the CPU\u0026rsquo;s microcode (ref)  For AMD processors, install the amd-ucode package. For Intel processors, install the intel-ucode package.  For exmaple, run\n# pacman -S intel-ucode 16. Configure the Boot Loader with systemd-boot (ref, systemd-boot) 16.1. Install the EFI boot manager\n# bootctl install 16.2. Create /boot/loader/entries/arch.conf\n Replace intel-ucode.img with amd-ucode.img if you have an AMD CPU Replace the UUID (not PARTUUID) to the one mapping to /dev/sda2 (Run blkid to find out)  title Arch Linux linux /vmlinuz-linux initrd /intel-ucode.img initrd /initramfs-linux.img options cryptdevice=UUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX:cryptroot root=/dev/mapper/cryptroot rw 16.3. Replace /boot/loader/loader.conf to\ndefault arch.conf timeout 5 console-mode max editor no 16.4. Review the configuration\n# bootctl list Boot Loader Entries: title: Arch Linux (default) id: arch.conf source: /boot/loader/entries/arch.conf linux: /vmlinuz-linux initrd: /intel-ucode.img /initramfs-linux.img options: cryptdevice=UUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX:cryptroot root=/dev/mapper/cryptroot rw 17. Reboot (ref) Exit the chroot environment by typing exit or pressing Ctrl+d. Then run reboot.\nIf everything works, it should ask for a password to access the cryptroot, like this screenshot below:\nOne last thing, if you computer, like mine, is sitting behind a DHCP (e.g., a typical router), you will need to enable dhcpcd to access the Internet. Run,\n# systemctl enable dhcpcd Congratulations! You have installed Arch Linux with Full Disk Encryption!\n","permalink":"https://whhone.github.io/posts/arch-linux-full-disk-encryption/","summary":"I recently re-installed my Arch Linux with full disk encryption (FDE), as one of the first steps, to bring privacy into my life. This guide documents the installation process in a step-by-step manner. I hope this can help people who also want to practice privacy.\nEach step in this guide are linked to the corresponding ArchWiki, precised to section level. You are suggested to read these references and, of course, the official installation guide because","title":"Installing Arch Linux with Full Disk Encryption"},{"content":"3 years ago, I switched from Mac OS back to Linux. The main reason was i3wm — a tiling window manager for Linux — and its way to switch between windows.\nIn this post, I am going to talk about how to switch windows on i3. But before that, let’s take a look at something we all know — Alt+Tab.\nThe Ergonomics Problem with Alt+Tab Alt+Tab (or Command+Tab on Mac) is the most typical way to switch windows. It shows the list of opened windows, then the user presses Tab repeatedly to go to the next window, and release all keys to select.\nThese “find”s are distractions. Users need to switch context off from the real task, find the other window, switch context back to the real tasks. These “find”s could happen over a hundred times a day and they become more complex when the number of opened windows goes up.\nFor example, when coding, I switch between 4 windows, the IDE, the terminal, the browser, and the note app very often. Switching window with Alt+Tab could drain my mental energy surreptitiously. These four are just the minimum. In reality, the number could be double or triple, as there are multiple browser windows (not to mention the tabs inside…), and other random applications.\nWhen I first met i3, it blew my mind with its alternatives to switch windows. Here are three ways I like,\n Scratchpad: Switch focus directly, without finding Move: Move to an adjacent window Match: Move to a window by string matching  1. Scratchpad – Switch to My Favorites  As the name indicates, this is useful for having a window with your favorite editor always at hand.\ni3 User’s Guide\n The first alternative is Scratchpad. It summons the targeted window directly, without finding it from the window list.\nIn the above screencast, Super+k focuses to the editor. Super+Enter focuses to the terminal. There is no finding in the whole flow, although I have more than 10 opened windows.\nIt works by putting the application to the background and focus to it when a user-defined hot-key is pressed. “Summoning” requires much less mental energy than “finding” when the hot-key becomes muscle memory.\nThe configuration is well-documented in the user guide. Here is the config for the above screencast:\n# Make the currently focused window a scratchpad bindsym $mod+Shift+minus move scratchpad # Show the first scratchpad window bindsym $mod+minus scratchpad show # Show the terminal with Super+Enter bindsym $mod+Return [class=\u0026quot;Terminator\u0026quot;] scratchpad show # Show the code editor with Super+k bindsym $mod+k [class=\u0026quot;code-oss\u0026quot;] scratchpad show These window properties could find by xprop.\n2. Move – Switch by What I See The second alternative is moving to an adjacent window. In my opinion, it is more visually-intuitive and predictable than the Alt+Tab.\nMoving to an adjacent window is the default mechanism of window switching, for most of the tiling window managers. I am not going to belabor here.\n3. Match – Switch by What I Know The last one in this post is matching. It matches and narrows down the list of windows.\nIn the above screencast, Super+g shows the list of all windows and I search for gedit by typing gedit.\nIt is powered by rofi, a window switcher, and application launcher, similar to Alfred for Mac OS. Here is the one-line configuration.\nbindsym $mod+g exec \u0026quot;rofi -show window\u0026quot; Conclusion  Scratchpad has constant complexity — O(1) — no matter how much windows are there. Move is intuitive and predictable way to switch to what I can see. Match is especially useful to go to a particular window in another workspace.  Among all three, Scratchpad is the one I love most.\nCredit: The GIFs in this post are created with peek and screenkey.\n","permalink":"https://whhone.github.io/posts/i3-switching-windows/","summary":"3 years ago, I switched from Mac OS back to Linux. The main reason was i3wm — a tiling window manager for Linux — and its way to switch between windows.\nIn this post, I am going to talk about how to switch windows on i3. But before that, let’s take a look at something we all know — Alt+Tab.\nThe Ergonomics Problem with Alt+Tab Alt+Tab (or Command+Tab on Mac) is the most typical way to switch windows.","title":"Switching Windows in i3 Window Manager"},{"content":"KonMari Method is a decluttering and organizing method, introduced in The Life-Changing Magic of Tidying Up, written by Marie Kondo. There was even a TV series, Tidying Up with Marie Kondo, about this tidying method on Netflix.\nWhat KonMari Method interested me, is not the main course (the tidying process), but the appetizer (how the tidying begins). The method starts by imagining the ideal lifestyle and it’s details. Once intimately familiar with the ideal life, then one can start tidying up and moving closer to the ideal life.\n  The interesting thing is, this approach itself has nothing to do with tidying. It could be applicable to something else. Its generalized form, “Imagine the ideal (______), and then move closer to it”, is universal and yet effective!\nIt is Universal First, this approach is universally applicable. When facing a problem, we can always substitute the blank (______) with other terms to guide ourselves to the solution. For examples,\n During the stay-at-home order,  imagine the ideal (work-from-home schedule), and then move closer to it.   When building software,  imagine the ideal (architecture), and then move closer to it.   When organizing personal knowledge,  imagine the ideal (system), and then move closer to it.   When being a role,  imagine the ideal (role, e.g., husband, father, engineer), and then move closer to it.    By imagining the ideal workplace, Marie wrote another book, called Joy at Work.\nIt is Effective Second, this approach is effective because it sets the ideal direction to move forward. Instead of blindly following or copying existing solutions, it encourages us to take a step back and think outside of the box. What the best solution really is.\nDon’t get me wrong, it does not mean we cannot follow or copy. Existing solutions could be better than the ideal we can imagine. However, this approach criticizes the existing solution, and hence, gives us a chance to do even better.\nFor the same examples,\n During the stay-at-home order,  Instead of sitting in front of the computer all day, think about what else can diversify the schedule.   When building software,  Instead of copying the old pattern, think about what could be simplified.   When organizing personal knowledge,  Instead of throwing digital note to the system, think about methodologies.   When being a role,  Instead of behaving the same day-by-day, think about how to improve.    What is the Ideal? Ideal does not mean having all good stuff, it is simply impossible.\n While you can have virtually anything you want, you can’t have everything you want.\n~Principles: Life \u0026amp; Work, Ray Dalio\n One can be the best marathon runner or best sprinter, but not both because they require different types of muscle. We cannot cram all the good things into a day because there are only 24 hours.\nInstead, ideal is all about identifying the true values, prioritizing, balancing and even giving up. Just like we need to let go some of our belongings when tidying up our living space.\nWell, knowing Marie’s approach is one thing, imaging the ideal is quite another, and it is much harder, way harder. At least, this is what I found when imagining the ideal lifestyle deep inside my mind and write it down clearly.\n","permalink":"https://whhone.github.io/posts/imagine-the-ideal/","summary":"KonMari Method is a decluttering and organizing method, introduced in The Life-Changing Magic of Tidying Up, written by Marie Kondo. There was even a TV series, Tidying Up with Marie Kondo, about this tidying method on Netflix.\nWhat KonMari Method interested me, is not the main course (the tidying process), but the appetizer (how the tidying begins). The method starts by imagining the ideal lifestyle and it’s details. Once intimately familiar with the ideal life, then one can start tidying up and moving closer to the ideal life.","title":"Imagine the Ideal"},{"content":"(Update 2020-10: I am going back to Hugo and writing blog post with Emacs/easy-hugo.)\nI have been blogging with Hugo, a static site generator, for 5 months. Recently, I decided to ditch it and migrate to WordPress.Org for a more writer-friendly workflow. I want to spend more time and efforts on writing instead of coding.\nThe Developer-Writer Dilemma Hugo is developer-friendly. It allows me to customize my site, in terms of the theme, layout, the content structure and also the Hugo Shortcodes very easily. I learned a lot when building the static site, the JAM stack concept, SCSS, HTML5 semantic tags, Opengraph, Twitter Card, et cetera. I like how simple it is to bring up the site, without setting up the LAMP or LEMP stack.\nWordPress is writer-friendly. It allows me to write anytime, anywhere. I can write posts from my computer or my phone. Its mobile app even works offline, without an internet connection. This is a gamer changer to me because I can spend my time writing while holding my little son Casper to sleep. Editing with the new WordPress Block Editor (Gutenberg), shipped with WordPress 5.0, is much efficient, when compared to editing Markdown.\nDeveloper and writer are both the identities I assigned to myself. This creates a dilemma. When I think about the customization, being able to build my site, Hugo gets me. When I think about the writing experience, being able to write whenever and wherever I am, and focus on the sentences instead of the Markdown syntax, WordPress gets me.\nThen, I asked myself — why did I start blogging as the 2020 new year revolution?\nThe Original Intention Why did I start this blog? It was actually not because of the developer identity. I have already been a developer for years and this identity is entrenched, without a shadow of a doubt. Instead, the original intention was to become a writer, which is a new identity I am pursuing.\nWhen I was using Hugo, I spent more time on tweaking the codes instead of writing things. I researched the best way of rendering an image in Markdown with Hugo. I organized the contents and reorganized them again to a “better” structure. I forked the theme I was using because I don’t like how it was implemented.\nThese are all fun things from a developer’s perspective, but not for a writer. Playing around the Markdown syntax is a distraction to the writing of the underlying sentences and ideas. Also, managing the posts in the WordPress admin console is actually more efficient, compared to the content directory.\nThe Verdict – WordPress  Redesign your life so the actions that matter most are also the actions that are easiest to do.\nAtomic Habits, James Clear\n “Be a writer” was what brought me to the blogging new year revolution. WordPress allows me to spend more time and efforts on writing. Open the browser or app, write and publish. Writing in rich text is just much more intuitive than plain text markdown, even though I am very proficient at Markdown.\nAfter the migration, I found two things that stand out.\n The writing experience with the WordPress Block Editor (Gutenberg). It is definitely much more powerful and easy than Markdown to build a web page with a rich layout. Search without an external search engine. Get the latest search result within the site. The expense is the ability to customize the site easily and being able to manage all the configurations with our beloved version control git.  While the current trend in the industry seems to be moving from the LAMP-like stack or MEAN-like stack (Node.js) to the JAM-like stack (static site generator). I am in the opposite direction with most people. :p\nMy ideal workflow is to have WordPress-like (anytime, anywhere with a decent editor) writer experience and Hugo-like developer experience.\nParting with Hugo This is an amicable parting! I have to say that Hugo is an awesome static site generator. I enjoyed the experiences with it when building the first version of this blog and published the first few posts. Here are the merits:\n Hugo is easy to install. I just need to download a single binary. While Jekyll (another static site generator need to pull a whole bunch of Ruby dependency.) Static site is very lightweight. I can deploy the site to the free f1-micro instance with only 0.2 shared CPU and 0.6 GB memory. Hugo is very developer-friendly. It has good documentation. The Hugo Pipe makes it super easy to customize the site with SASS/SCSS.  However, Hugo is not perfect and I struggled with it. Here are some complaints:\n Markdown is limited. e.g., create a link that opens in a new tab (\u0026lt;a\u0026gt; with target=\u0026quot;_blank\u0026quot;) is not straight-forward and not standardized by the Markdown spec. Hugo does not have a good plugin system. All features / plugins are coupled to the theme. If the theme does not provide the functionality I need, I am going to suffer, write my own, or fork the theme. Cannot write anytime, anywhere. When I find a typo on my phone, I need to correct it right away.  I have a feeling that I will meet Hugo again, in another scenario, in the future.\n","permalink":"https://whhone.github.io/posts/hugo-to-wordpress/","summary":"(Update 2020-10: I am going back to Hugo and writing blog post with Emacs/easy-hugo.)\nI have been blogging with Hugo, a static site generator, for 5 months. Recently, I decided to ditch it and migrate to WordPress.Org for a more writer-friendly workflow. I want to spend more time and efforts on writing instead of coding.\nThe Developer-Writer Dilemma Hugo is developer-friendly. It allows me to customize my site, in terms of the theme, layout, the content structure and also the Hugo Shortcodes very easily.","title":"From Hugo to WordPress"},{"content":"The recent shelter-in-place / stay-at-home order has dramatically changed our routines. I don\u0026rsquo;t need to commute to office so I do not listen to podcasts. I don\u0026rsquo;t have morning coffee since I have no access to the mirco-kitchen in the office. I walk less as I stay at home all day. I started doing daily push up because it is less awkward to do at home, compared to the office. I spend more time with Casper because he is just nearby. Even on my Strava feed, some friends seem to have disappeared while some friends start showing up more days.\nTechnically speaking, this changed tons of \u0026ldquo;habit cues\u0026rdquo;, like the activity, place, people, and even our mood. Hence, it will definitely change our habits as well.\n You never want a serious crisis to go to waste. And what I mean by that is an opportunity to do things that you think you could not do before. \u0026ndash; Rahm Emanuel\n In terms of personal development, it is a waste if we don\u0026rsquo;t deliberately build good habits from this big change. Don\u0026rsquo;t expect good habits to come automatically. They usually don\u0026rsquo;t! Instead, bad habits are more likely to form because their consequences are delayed while the rewards are immediate. Like eating junk food, surfing social media, just to name a few.\nIf good habits do not come automatically, how to build them effectively?\nThe Keystone Habits According to Charles Duhigg, author of The Power of Habit,\n Keystone habits help other habits to flourish by creating new structures, and establish cultures where change becomes contagious.\n In other words, keystone habits are habits that build other habits. Some common keystone habits are exercising, meditation, good sleep, journaling etc. (These examples might sound boring and not as cool as the \u0026ldquo;keystone habits\u0026rdquo; :-p )\nGood keystone habits are worth investing in and their domino effects will make huge impacts in the long term. Time will magnify the results. Although we know keystone habits are great, the problem is, like all habits, they could break. According to US News, 80% of new year\u0026rsquo;s resolutions fail by the second week of Feburary.\nHow to make good (keystone) habits stick? Well, let\u0026rsquo;s build the keystone habit of keystone habits.\nHabit Tracker (The Keystone Habit of Keystone Habits) In my humble opinion, habit tracker is the keystone habit of keystone habits because it holds the explicit cues to other habits / keystone habits. It is beautiful because it allows me to keep only one, instead of all immature habits in mind. It makes habit building much easier!\nMy first habit tracker was my Evernote Productivity System. It simply held all my TODOs and daily habits.\nHowever, TODOs and habits are fundamentally different. For example, habits repeat and repeat very often but TODOs are not. Habits are more okay to break if the reclaiming is fast. The value of habits are measured over time. That said, mixing habits and TODOs in the same list obscures the important TODOs.\nHence, I split them into a standalone habit tracker app. My second (current) habit tracker becomes a standalone app.\nThat is how I build habits now.\nThe Two Books Habit is an interesting topic and it has gotten traction in recent years, thanks to two best seller books.\n The Power of Habit, by Charles Duhigg, 2017 Atomic Habit, by James Clear, 2018  I learnt the habit concepts from these two books. \u0026ldquo;The Power of Habit\u0026rdquo; tells more stories behind habits while \u0026ldquo;Atomic Habit\u0026rdquo; gives more practical advices. Both are good books but if you want to pick only one, then \u0026ldquo;Atomic Habit\u0026rdquo; is the way to go!\nFinally, thanks for reading til now to this very last sentence :-)\n","permalink":"https://whhone.github.io/posts/building-habit/","summary":"The recent shelter-in-place / stay-at-home order has dramatically changed our routines. I don\u0026rsquo;t need to commute to office so I do not listen to podcasts. I don\u0026rsquo;t have morning coffee since I have no access to the mirco-kitchen in the office. I walk less as I stay at home all day. I started doing daily push up because it is less awkward to do at home, compared to the office. I spend more time with Casper because he is just nearby.","title":"Building Habits"},{"content":"In the previous post 2019 Year-End Reflection, I wrote:\n I kept a daily journal. When people ask me why keeping a journal, my 2019 answer was to track TODO and activity log, then review at the end of the day. My 2020 answer is to make every day meaningful and counted. I will share the nuances in another post later.\n In this post, I will share how I got started and the 3 components of my daily journal.\n Activity Log Most Important TODOs Daily Highlights  Activity Log The activity log is what brought me to journaling after reading Cal Newport\u0026rsquo;s Deep Work:\n For an individual focused on deep work, it’s easy to identify the relevant lead measure: time spent in a state of deep work dedicated toward your wildly important goal. \u0026hellip; When I shifted to tracking deep work hours, suddenly these measures became relevant to my day-to-day: Every hour extra of deep work was immediately reflected in my tally.\n How much hours do I spend on deep and shallow work respectively? I don\u0026rsquo;t really know. So I started tracking my activities and annotating their deepnesses.\nThis was my very first daily journal :-)\nI found the activity log does not only track the deep and shallow hours, but also proved the Planning Fallacy to me:\n The planning fallacy, \u0026hellip;, is a phenomenon in which predictions about how much time will be needed to complete a future task display an optimism bias and underestimate the time needed.\n I have estimated a task that takes one day but it took me 3 days to finish. Activity log gave me a sense of how my time is spent and how much time do I need for a specific kind of task. Later at night, I can also use this activity log to review what I have done in a day.\nMost Important TODOs I have two TODO lists for each day. The everything list and the most important list. As the names imply, the everything list holds all TODOs scheduled for the day and the most important list holds the most important TODOs of the day.\nSo, why do I need two lists?\nWithout the important list, the everything list, which consists of many important, unimportant, urgent and nonurgent TODOs, could be overwhelming and confusing. The volume of TODOs usually exceed one\u0026rsquo;s capacity. As the Completion Bias states:\n It feels good to chip away at the smaller tasks nibbling at your brain, but the time you spend doing so is time you’re not spending on bigger, more important projects.\n That means I tend to check off many small and easy TODOs but not getting the important and hard ones done. To fix it, each morning, I go through the everything list from my Productivity System and curate TODOs to form the most important list. Then, focus on the most important list before going back to the everything list.\nThat does not mean the everything list is useless. These two lists are complementary. Without the everything list, brainstorming the most important list out of nothing is an arduous task. Those important TODOs could be too ad hoc and hence not really important.\nThe most important list also has a variation called the \u0026ldquo;1-3-5 Rule\u0026rdquo;.\nDaily Highlight Daily highlight is my 2020 answer to daily journal.\nThe activity log and the most important TODOs list mentioned above had worked very well for me, until I was reviewing the journal in the last year end. I found my journal is boring and full of little things that are not interesting to me anymore. Those \u0026ldquo;fix bug XXX\u0026rdquo;, \u0026ldquo;weekly YYY meeting\u0026rdquo; or \u0026ldquo;implement feature ZZZ\u0026rdquo; got the things done but I no longer care about them.\nI asked myself, how can I make every day I lived meaningful and counted, so that some days in the future, I can reminisce?\nThen, I added the daily highlight section to the daily journal. The daily highlights could be anything, without any format but have to be worth reading again. For examples,\n an inspiring excerpt I read, an unforgettable mistake I made, a bloody lesson I learnt, a nice chat with someone, a work I am proud of.  Finally, thanks for reading til now to this very last sentence :-)\n","permalink":"https://whhone.github.io/posts/daily-journal/","summary":"In the previous post 2019 Year-End Reflection, I wrote:\n I kept a daily journal. When people ask me why keeping a journal, my 2019 answer was to track TODO and activity log, then review at the end of the day. My 2020 answer is to make every day meaningful and counted. I will share the nuances in another post later.\n In this post, I will share how I got started and the 3 components of my daily journal.","title":"Daily Journal"},{"content":"It is probably easier to explain what ineffective reading is first.\nIf you are \u0026ldquo;seeing\u0026rdquo; the words without processing, no matter how many words you \u0026ldquo;see\u0026rdquo; per minute, it is ineffective. If you cannot recall or refer to the key concepts of an inspiring book you have read in the past, no matter how many books you have read, it is ineffective. If you cannot implement what you read and make some differences in real life, no matter how many books you are aiming to read in a year, it is ineffective.\nSo, what is effective reading? \u0026ldquo;Effectiveness\u0026rdquo; here means maximizing the understanding, the usage and the retention of knowledge for the future per unit of time spent reading.\nIneffective reading is always a problem. So far, I have developed three ways to make reading less ineffective.\n Mindful Reading - for understanding Summarization - for discoverability Digital Flashcard - for retention  1. Mindful Reading Mindful reading is the first key to read effectively. It ensures you are really reading and understanding what the author is saying.\nThe converse of mindful reading is mindless reading. During mindless reading, we are seeing the words instead of understanding them. We are not able to recall what we read one minute ago. When I realize I am reading mindlessly, I stop, do something else or take some rest. Mindless reading is ineffective. It is a waste of time and energy.\n2. Summarization Understanding decays because we, humans, forget. It is okay to forget. However, when we need to use a piece of forgotten knowledge, we want to be able to reload the knowledge as fast as possible.\nSummarization is like building a personal index. It allows you to navigate through important concepts and to retrieve context and knowledge swiftly. Without summarization, we will need to spend a huge amount of time reading the material again to find what we need. This is definitely ineffective.\nThe method I use is Tiago Forte\u0026rsquo;s Progressive Summarization. It highlights and formats the readings into layers. The higher layers are compressed to make the notes discoverable and the lower layers provide context.\n Layer 0: the original, full-length source text Layer 1: the content that initially bring into note-taking program. Layer 2: the first round of summarization, the best parts Layer 3: the second round of summarization, among all Layer 2, “the best of the best” Layer 4: the summary in my own words. Layer 5: add my own personality and creativity and turn them into something else.  A real example 1 This is my summary for \u0026ldquo;Clean Architecture Ch.22\u0026rdquo;. When I read the note, I first look at the top summary (layer 4), and then the yellow highlight (layer 3). This should give me most idea of what this chapter is about. If I need more, then I read the bold (layer 2) highlights and then the plain text highlights to get more context. If I still need more, then I could go to the original chapter.\n3. Digital Flashcards If you\u0026rsquo;ve got a leaky bucket, you\u0026rsquo;re better off fixing the leak before pouring water in the top.\nI mentioned above that we, humans, forget and it is okay to forget. What if we need to retain something in the brain? For instance, memorizing vocabularies could reduce the effort of checking a dictionary (and thus making reading more effective!). Internalizing key concepts could make it easier to utilize them.\nMy method is to formulate the knowledge into digital flashcards and review them with spaced repetition. (I review the cards every night when I am holding my sleeping Casper.)\nSuperMemo and Anki are among the popular software in this realm. No matter which software to use, read these twenty rules published by SuperMemo about the best practices of formulating knowledge. \u0026ldquo;Do not learn if you do not understand\u0026rdquo; is the wisdom.\nA real example 2 After creating the summary above, I think \u0026ldquo;Dependency Rule\u0026rdquo; is a very key concept that is worth memorizing, so I create a corresponding flashcard. When reviewing the card, if this feels \u0026ldquo;easy\u0026rdquo; to me, I will tap \u0026ldquo;16d Easy\u0026rdquo; to snooze the card 16 days later. If I cannot recall the meaning in 10 seconds, then I tap \u0026ldquo;\u0026lt;10 min Again\u0026rdquo;.\nConclusion  \u0026ldquo;The only way to go fast is to go well\u0026rdquo;, Robert C. Martin\n I think this applies to many things, including coding, driving and reading. All of mindful reading, summarization, and making flashcards slow us down in terms of the number of words and books you read in a given time. However, they are ways to go fast in terms of effectiveness.\nI am still learning how to make the reading process more effective. If you have any tips, please let me know. :)\n","permalink":"https://whhone.github.io/posts/effective-reading/","summary":"It is probably easier to explain what ineffective reading is first.\nIf you are \u0026ldquo;seeing\u0026rdquo; the words without processing, no matter how many words you \u0026ldquo;see\u0026rdquo; per minute, it is ineffective. If you cannot recall or refer to the key concepts of an inspiring book you have read in the past, no matter how many books you have read, it is ineffective. If you cannot implement what you read and make some differences in real life, no matter how many books you are aiming to read in a year, it is ineffective.","title":"Effective Reading"},{"content":"In this era, there are \u0026ldquo;productive people\u0026rdquo; who use \u0026ldquo;productivity systems\u0026rdquo; to manage day-to-day chores, TODOs, notes and so on. These productivity systems are usually note taking apps (Apple Notes, Evernote, Google Keep, OneNote), task manager apps (Todoist, Wunderlist, TickTick), paper notebooks or the combination of them.\nThese \u0026ldquo;productive people\u0026rdquo; could be divided into two kinds.\nThe first kind works for the system. They fill the system with unactionable tasks that will never get done and unreadable notes that will never get used again. They do not maintain the system and let it become a chaos. The value added to the system is more than the value generated from it. At the end, they might stop using the system, switch to a \u0026ldquo;better\u0026rdquo; app and hope the new one will work out.\nThe second kind has the system working for them. They might still add unactionable tasks but will make them actionable. They might add unreadable notes but will turn them into references that are searchable and reusable. They maintain the system regularly and are able to stick with it for a long time. The value provided by the system is more than the value added to the system.\nI was the first kind and now the second kind. So, what made the difference? I would say it is the methodology. A grand piano helps but one still need to know how to play it.\nDon\u0026rsquo;t get me wrong. I am not saying tools are not important. Both tools and methodologies are important. It is just easier to acquire tools than methodologies. One can buy a grand piano in one day but it takes years of practice to be a great pianist.\nAlso, I don\u0026rsquo;t know what the best methodology is, whether it is David Allen\u0026rsquo;s Getting Things Done (GTD), Ryder Carroll\u0026rsquo;s Bullet Journal, or your own method. The answer is probably different for different people.\nFor my own system, it is influenced by GTD but with some modifications. I sticked with the 5 key steps but replaced the Tickler system with Evernote Reminder.\n Capture: Whenever I have something that might need to follow up, I put them into my inbox. It could be a TODO, a random thought, a link, a screenshot, a photo, a new vocabulary, a web clip, or, of course, unactionable tasks. Clarify: Later, I convert them to actionable tasks, usable references, someday/maybe, or delete them. Organize: I organize those items with Tiago Forte\u0026rsquo;s P.A.R.A. method, which divides everything into 4 groups, Projects (short-term), Areas of Responsibility (long-term), Resource (topics interested) and Archived. This is the most practical organizational method I have seen so far. Review: Every Sunday, I review all notes created in the last week and plan for the next week. I reschedule tasks so that I won\u0026rsquo;t be too free or too busy next week. Before a long weekend or holiday, I would pull the someday/maybe items and actualize some. Engage: When I have free time, I open my task list and do the most important tasks. This have become the \u0026ldquo;keystone habit\u0026rdquo; to build other habits, like memorizing vocuburaries and meditation. This also embolden me that I can finish bigger projects, like blogging and reading books, because the task list always reminds me.  Lastly, adding two screenshots which might tell more than the words.\n","permalink":"https://whhone.github.io/posts/productivity-system/","summary":"In this era, there are \u0026ldquo;productive people\u0026rdquo; who use \u0026ldquo;productivity systems\u0026rdquo; to manage day-to-day chores, TODOs, notes and so on. These productivity systems are usually note taking apps (Apple Notes, Evernote, Google Keep, OneNote), task manager apps (Todoist, Wunderlist, TickTick), paper notebooks or the combination of them.\nThese \u0026ldquo;productive people\u0026rdquo; could be divided into two kinds.\nThe first kind works for the system. They fill the system with unactionable tasks that will never get done and unreadable notes that will never get used again.","title":"Productivity System"},{"content":"2019 is the year of changes to me, in terms of new habits developed and the new responsibility of becoming a father.\nHere are what I have done.\nI completed 9 English books. This number was a shameful ZERO for the 28 years before 2019. (Even when I was a student and being tasked to write book reports, I just paraphrased the introduction and/or some random pages of the books.) Reading have instilled new ideas into myself and also ignited other habits.\nI crammed 2000+ new vocabularies into my head. Last year, I knew spaced repetition from Learning How to Learn and started memorizing vocabularies. Whenever I encounter new vocabularies (mostly from reading), I add them to my Anki collection and review daily. I use \u0026ldquo;crammed\u0026rdquo; instead of \u0026ldquo;learnt\u0026rdquo; because I still cannot use most of them. This is something I need to fix in 2020.\nI meditated. After reading fews books that recommend meditation unanimously, I started with Headspace. I have to say being mindful has the magic power to change other axises.\nI kept a daily journal. When people ask me why keeping a journal, my 2019 answer was to track TODO and activity log, then review at the end of the day. My 2020 answer is to make every day meaningful and counted. I will share the nuances in another post later. (Update on 2020-03-15: See Daily Journal)\nI logged 1000 miles into Strava. This is actually far less than my targeted 1500 miles. I have been running for 17 years and never going to cease, although, with Casper, squeezing time for exercising will be much challenging. On the bright side, this could be an excuse for ignoring the pacing and millage :p\nWe delivered Casper! This is marvellous even with the sleepless nights and all other compromises. Taking good care of the little one and my wife is the overarching priority in 2020.\nLife is composed of events that are interconnected. If I did not take the \u0026ldquo;Learning How to Learn\u0026rdquo;, I won\u0026rsquo;t start memorizing vocabularies. If I did not memorize vocabularies, I won\u0026rsquo;t start reading to collect more English vocabularies. If I did not read books like Ray Dialo\u0026rsquo;s Principles, I won\u0026rsquo;t start meditation.\nAs a new year revolution, I am going to start writing (yes, this blog), on the thoughts, learning methods and engineering. Let\u0026rsquo;s see what chain reactions will happen when I look back at the end of 2020.\n","permalink":"https://whhone.github.io/posts/2019-year-end-reflection/","summary":"2019 is the year of changes to me, in terms of new habits developed and the new responsibility of becoming a father.\nHere are what I have done.\nI completed 9 English books. This number was a shameful ZERO for the 28 years before 2019. (Even when I was a student and being tasked to write book reports, I just paraphrased the introduction and/or some random pages of the books.) Reading have instilled new ideas into myself and also ignited other habits.","title":"2019 Year-End Reflection"}]